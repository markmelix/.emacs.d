* Configuration
** Perfomance
#+begin_src elisp
 (setq gc-cons-threshold 100000000)
 (setq read-process-output-max (* 1024 1024))
#+end_src
** Personal Information
   #+begin_src elisp
     (setq user-full-name "Mark Meliksetyan")
     (setq user-mail-address "markmelix@gmail.com")
   #+end_src
** Startup Screen
   Inhibit startup screen
   #+begin_src elisp
     (setq inhibit-startup-screen t
	   inhibit-splash-screen  t)
   #+end_src
** Variables
   #+begin_src elisp
     (defvar my/buffer-width 80)
   #+end_src
** Functions
   #+begin_src elisp
     (defun my/open-init-file ()
       "Open the user init file."
       (interactive)
       (find-file user-init-file))

     (defun my/font-installed-p (font-name)
       "Check if font with FONT-NAME is available."
       (if (find-font (font-spec :name font-name))
	   t
	 nil))
   #+end_src
** Modes
*** Sensitive Mode
    #+begin_src elisp
      (define-minor-mode sensitive-mode
	"Disable all Emacs file backup features."
	:init-value nil
	:lighter " Sensitive"
	:keymap nil
	;; Check if the mode is enabled and if yes, inhibit backups for the current
	;; buffer by setting buffer-local variable backup-inhibit to true and
	;; disabling auto-save mode if it is enabled. If mode is not enabled,
	;; enable auto-save mode and disable backups inhibit by killing local
	;; variable.
	(if (symbol-value sensitive-mode)
	    (progn
	      (make-local-variable 'backup-inhibited)
	      (setq backup-inhibited t)
	      (when auto-save-default
		(auto-save-mode -1)))
	  (unless auto-save-default
	    (auto-save-mode 1))
	  (kill-local-variable 'backup-inhibited)))
    #+end_src
** Keybindings
   #+begin_src elisp
     (global-set-key (kbd "C-c t") 'toggle-truncate-lines)
   #+end_src
** Backup
   #+begin_src elisp
     ;; Backup of a file the first time it is saved.
     (setq make-backup-files         t

	   ;; Don't clobber symlinks
	   backup-by-copying         t

	   ;; Version numbers for backup files
	   version-control           t

	   ;; Delete excess backup files silently
	   delete-old-versions       t

	   ;; Use system trash can
	   delete-by-moving-to-trash t

	   ;; Oldest versions to keep when a new numbered backup is made
	   kept-old-versions         6

	   ;; Newest versions to keep when a new numbered backup is made
	   kept-new-versions         9

	   ;; Auto-save every buffer that visits a file
	   auto-save-default         t

	   ;; Number of seconds idle time before auto-save
	   auto-save-timeout         20

	   ;; Number of keystrokes between auto-saves
	   auto-save-interval        200

	   ;; Don't create lockfiles
	   create-lockfiles          nil)
   #+end_src
** Frame
*** Hide useless
**** Hide tool bar
     #+begin_src elisp
       (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     #+end_src
**** Hide menu bar
     Menu bar also can be accessed using F10 key.
     #+begin_src elisp
       (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
     #+end_src
**** Hide scroll bar
     #+begin_src elisp
       (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     #+end_src
**** Disable cursor blinking
     #+begin_src elisp
       (when (fboundp 'blick-cursor-mode) (blink-cursor-mode -1))
     #+end_src
*** Font
    Set frame font to the [[https://github.com/ryanoasis/nerd-fonts][Hack Nerd one]]
    #+begin_src elisp
      (set-frame-font "Hack Nerd Font 12" nil t)
    #+end_src
*** Ring
    Don't ring when do something wrong
    #+begin_src elisp
      (setq ring-bell-function 'ignore)
    #+end_src
** Buffer
*** Auto refresh
    Auto revert mode looks for changes to files, and updates them for you.
    #+begin_src elisp
	    (global-auto-revert-mode 1)
      (setq global-auto-revert-non-file-buffers t)
(setq auto-revert-verbose nil)
    #+end_src
With these settings, dired buffers are also updated. The last setting makes sure
that you're not alerted every time this happens. Which is every time you save
something.
*** Fill column
    Display fill column indicator at every my/buffer-width column
    #+begin_src elisp
      (setq-default display-fill-column-indicator-column my/buffer-width)
      (setq-default fill-column my/buffer-width)
      (global-display-fill-column-indicator-mode 1)
    #+end_src
*** Line numbers
    Display line numbers only when edit programs or org files
    #+begin_src elisp
      (add-hook 'prog-mode-hook 'display-line-numbers-mode)
      (add-hook 'org-mode-hook 'display-line-numbers-mode)
    #+end_src
*** Scrolling
    Smooth scrolling
    #+begin_src elisp
      (setq scroll-step           1
	    scroll-margin         10
	    scroll-conservativegly 10000
	    mouse-wheel-progressive-speed nil
	    mouse-wheel-follow-mouse 't)
	 #+end_src
*** Final new line
    Automatically end each file with new line
    #+begin_src elisp
      (setq mode-require-final-newline t)
    #+end_src
*** Whitespace cleanup
    #+begin_src elisp
      ;; Remove useless whitespace before saving a file
      (add-hook 'before-save-hook 'whitespace-cleanup)
      (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
    #+end_src
*** Wrapping
    Wrap by words instead of characters
    #+begin_src elisp
      (setq word-wrap t)
    #+end_src
*** Indentation
    Don't indent with tabs
    #+begin_src elisp
      (setq indent-tabs-mode nil)
    #+end_src

    Set tab width to 4
    #+begin_src elisp
      (setq tab-width 2)
    #+end_src

    Erase more spaces at once instead of erasing one space at time
    #+begin_src elisp
      (setq backward-delete-char-untabify-method 'hungry)
    #+end_src

    Inhibit electric indent
    #+begin_src elisp
      (setq-default electric-indent-inhibit t)
    #+end_src
*** Parenthesis
    Highlight any matching parenthesis
    #+begin_src elisp
      (show-paren-mode 1)
    #+end_src
** Server
   #+begin_src elisp
     (require 'server)
   #+end_src
   Start emacs server if not already started
   #+begin_src elisp
     (unless (server-running-p)
       (server-start))
   #+end_src
** Minibuffer
*** Yes or No Alias
    Make 'yes or no' messages like 'y or n'
    #+begin_src elisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src
** Encoding
   Set default encoding system to utf-8
   #+begin_src elisp
     (set-language-environment   "utf-8")
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (prefer-coding-system       'utf-8)
   #+end_src
** Package Management and Advanced Customization
*** Bootstrap straight package manager
    #+begin_src elisp
      (defvar bootstrap-version)
      (let ((bootstrap-file
	     (expand-file-name "straight/repos/straight.el/bootstrap.el"
			       user-emacs-directory))
	    (bootstrap-version 5))
	(unless (file-exists-p bootstrap-file)
	  (with-current-buffer
	      (url-retrieve-synchronously
	       (concat "https://raw.githubusercontent.com/raxod502/straight.el"
		       "/develop/install.el")
	       'silent 'inhibit-cookies)
	    (goto-char (point-max))
	    (eval-print-last-sexp)))
	(load bootstrap-file nil 'nomessage))
    #+end_src
*** use-package
    Install use-package - syntax sugar for better package management
    #+begin_src elisp
      (straight-use-package 'use-package)
    #+end_src
*** Org Roam
    #+begin_src elisp
      (use-package org-roam
	  :straight t
	  :custom
	  (org-roam-completion-everywhere t)
	  (org-roam-directory (file-truename "~/Braindump"))
	  :bind (("C-c n l" . org-roam-buffer-toggle)
		 ("C-c n f" . org-roam-node-find)
		 ("C-c n g" . org-roam-graph)
		 ("C-c n i" . org-roam-node-insert)
		 ("C-c n c" . org-roam-capture)
		 ("C-c n j" . org-roam-dailies-capture-today)
	  :map org-mode-map
	  ("C-M-i" . completion-at-point))
	  :init
	  (setq org-roam-v2-ack t)
	  :config
	  (org-roam-db-autosync-mode))
	  ;; ;; If using org-roam-protocol
	  ;; (require 'org-roam-protocol))
    #+end_src
*** Solarized Theme
    #+begin_src elisp
      (use-package solarized-theme
	:if (display-graphic-p)
	:straight t
	:config
	(load-theme 'solarized-dark t))
    #+end_src
*** Keep .emacs.d clean
    #+begin_src elisp
      (use-package no-littering
	:straight t
	:custom
	(auto-save-file-name-transforms
	 `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
	(custom-file (no-littering-expand-etc-file-name "custom.el")))
    #+end_src
*** IDE features
**** lsp-mode
     #+begin_src elisp
       (use-package lsp-mode
	 :straight t
	 :commands lsp
	 ;; :hook lsp-ui-mode
	 :custom
	 (lsp-rust-analyzer-cargo-watch-command "clippy")
	 :config
	 (global-eldoc-mode -1))
     #+end_src
**** lsp-ui
     #+begin_src elisp
       (use-package lsp-ui
	 :disabled
	 :straight t
	 :commands lsp-ui-mode
	 :custom
	 (lsp-ui-doc-enable nil))
     #+end_src
**** flycheck
     #+begin_src elisp
       (use-package flycheck
	 :straight t)
     #+end_src
**** yasnippet-snippets
     #+begin_src elisp
       (use-package yasnippet-snippets
	 :straight t)
     #+end_src
**** yasnippet
     #+begin_src elisp
       (use-package yasnippet
	 :after yasnippet-snippets
	 :straight t
	 :hook ((prog-mode . yas/minor-mode)
		(text-mode . yas/minor-mode))
	 :config
	 (yas-reload-all))
     #+end_src
**** company
     #+begin_src elisp
       (use-package company
	 :after yasnippet
	 :straight t
	 :bind (:map company-active-map
		     ("C-n" . company-select-next)
		     ("C-p" . company-select-previous)
		     ("M-<" . company-select-first)
		     ("M->" . company-select-last)))
     #+end_src
*** Different language support
**** Rust
    #+begin_src elisp
      (use-package rustic
	:straight t)
    #+end_src
*** Highlight Indent Guides
    #+begin_src elisp
      (use-package highlight-indent-guides
	:straight t
	:custom (highlight-indent-guides-method 'character)
	:hook ((prog-mode . highlight-indent-guides-mode)
	       (org-mode  . highlight-indent-guides-mode)))
    #+end_src
*** Better mode line
    #+begin_src elisp
      (use-package telephone-line
	:straight t
	:config
	(telephone-line-mode 1))
    #+end_src
*** Better project management
    #+begin_src elisp
      (use-package projectile
	:straight t
	:bind-keymap ("C-c p" . projectile-command-map)
	:config
	(projectile-mode 1))
    #+end_src
*** Helm
**** helm
     #+begin_src elisp
       (use-package helm
	 :demand t
	 :straight t
	 :custom (helm-M-x-fuzzy-match t)
	 :bind ("M-x"     . helm-M-x)
	 ("C-x r b" . helm-filtered-bookmarks)
	 ("C-x C-f" . helm-find-files)
	 :config
	 (helm-mode 1))
     #+end_src
**** helm-ag
     #+begin_src elisp
       (use-package helm-ag
	 :after helm
	 :straight t)
     #+end_src
**** helm-projectile
     #+begin_src elisp
       (use-package helm-projectile
	 :after (helm projectile)
	 :straight t
	 :config
	 (helm-projectile-on))
     #+end_src
*** Dired
**** dired-subtree
     #+begin_src elisp
       (use-package dired-subtree
	 :straight t)
     #+end_src
**** dired-filter
     #+begin_src elisp
       (use-package dired-filter
	 :straight t)
     #+end_src
**** dired-open
     #+begin_src elisp
       (use-package dired-open
	 :straight t)
     #+end_src
*** Vim inside Emacs
**** undo-tree
     I use undo-tree as a undo-system for the Evil.
     #+begin_src elisp
       (use-package undo-tree
	 :straight t
	 :config
	 (global-undo-tree-mode 1))
     #+end_src
**** key-chord
     With key chord I can map 'jj' or 'kk' to switch to normal state in the Evil.
     #+begin_src elisp
       (use-package key-chord
	 :straight t
	 :custom
	 (key-chord-keys-delay 0.5)
	 :config
	 (key-chord-mode 1))
     #+end_src
**** evil
***** evil
      #+begin_src elisp
	(use-package evil
	  :demand t
	  :after (undo-tree key-chord)
	  :straight t
	  :custom
	  (evil-undo-system         'undo-tree)
	  (evil-want-keybinding     nil)
	  (evil-vsplit-window-right t)
	  :hook (evil-local-mode-hook . turn-undo-tree-mode)
	  :bind (:map evil-replace-state-map
		      ("C-c" . evil-normal-state)
		      :map evil-visual-state-map
		      ("C-c" . evil-normal-state)
		      :map evil-operator-state-map
		      ("C-c" . evil-normal-state))
	  :config
	  (evil-mode 1)

	  (add-hook 'emacs-lisp-mode-hook
		    (function (lambda ()
				(setq evil-shift-width 2))))
	  (require 'key-chord)
	  (key-chord-define evil-insert-state-map "jj" 'evil-normal-state)
	  (key-chord-define evil-insert-state-map "kk" 'evil-normal-state)
      #+end_src
***** evil-collection
      #+begin_src elisp
	(use-package evil-collection
	  :straight t
	  :custom (evil-collection-setup-minibuffer t)
	  (evil-collection-want-find-usages-bindings nil)
	  :config
	  (evil-collection-init))
      #+end_src
***** evil-lion
      #+begin_src elisp
	(use-package evil-lion
	  :straight t
	  :bind (:map evil-normal-state-map
		      ("g l " . evil-lion-left)
		      ("g L " . evil-lion-right)
		      :map evil-visual-state-map
		      ("g l " . evil-lion-left)
		      ("g L " . evil-lion-right)))
      #+end_src
***** evil-commentary
      #+begin_src elisp
	(use-package evil-commentary
	  :straight t
	  :bind (:map evil-normal-state-map
		      ("gc" . evil-commentary)))
      #+end_src
***** evil-goggles
      #+begin_src elisp
	(use-package evil-goggles
	  :straight t
	  :config
	  (evil-goggles-use-diff-faces)
	  (evil-goggles-mode 1))
      #+end_src
***** evil-surround
      #+begin_src elisp
	(use-package evil-surround
	  :straight t
	  :commands (evil-surround-edit
		     evil-Surround-edit
		     evil-surround-region
		     evil-Surround-region)
	  :init
	  (evil-define-key 'operator global-map "s"  'evil-surround-edit)
	  (evil-define-key 'operator global-map "S"  'evil-Surround-edit)
	  (evil-define-key 'visual   global-map "S"  'evil-surround-region)
	  (evil-define-key 'visual   global-map "gS" 'evil-Surround-region))
      #+end_src
***** evil-mc
      #+begin_src elisp
	(use-package evil-mc
	  :straight t
	  :config
	  (evil-define-key* '(normal visual) global-map
			    (kbd "gr") evil-mc-cursors-map
			    (kbd "C-M-<mouse-1>") 'evil-mc-toggle-cursor-on-click
			    (kbd "gr M-n") 'evil-mc-make-and-goto-next-cursor
			    (kbd "gr M-p") 'evil-mc-make-and-goto-prev-cursor
			    (kbd "gr C-n") 'evil-mc-make-and-goto-next-match
			    (kbd "gr C-t") 'evil-mc-skip-and-goto-next-match
			    (kbd "gr C-p") 'evil-mc-make-and-goto-prev-match)
	  (global-evil-mc-mode 1)))
      #+end_src
