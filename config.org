* Configuration
** Perfomance
   #+begin_src elisp
     (defvar gc-cons-threshold-default gc-cons-threshold
       "Default value of the gc-cons-threshold variable")
     (setq gc-cons-threshold 100000000)
     (setq read-process-output-max (* 1024 1024))
     (setq exec-path (append exec-path '("~/.local/bin")))
   #+end_src

** Personal Information
   #+begin_src elisp
     (setq user-full-name "Mark Meliksetyan")
     (setq user-mail-address "markmelix@gmail.com")
   #+end_src

** Startup Screen
   Inhibit startup screen
   #+begin_src elisp
     (setq inhibit-startup-screen t
	   inhibit-splash-screen  t)
   #+end_src

** Initial scratch buffer message
   #+begin_src elisp
     (setq initial-scratch-message nil)
   #+end_src

** Variables
   #+begin_src elisp
     (defvar my/buffer-width 80)
   #+end_src

** Functions
   #+begin_src elisp
     (defun my/open-config-file ()
       "Open the ~/.emacs.d/config.org file."
       (interactive)
       (find-file (expand-file-name "config.org" user-emacs-directory)))

     (defun my/font-installed-p (font-name)
       "Check if font with FONT-NAME is available."
       (if (find-font (font-spec :name font-name))
	   t
	 nil))
   #+end_src

** Modes
*** Sensitive Mode
    #+begin_src elisp
      (define-minor-mode sensitive-mode
	"Disable all Emacs file backup features."
	:init-value nil
	:lighter " Sensitive"
	:keymap nil
	;; Check if the mode is enabled and if yes, inhibit backups for the current
	;; buffer by setting buffer-local variable backup-inhibit to true and
	;; disabling auto-save mode if it is enabled. If mode is not enabled,
	;; enable auto-save mode and disable backups inhibit by killing local
	;; variable.
	(if (symbol-value sensitive-mode)
	    (progn
	      (make-local-variable 'backup-inhibited)
	      (setq backup-inhibited t)
	      (when auto-save-default
		(auto-save-mode -1)))
	  (unless auto-save-default
	    (auto-save-mode 1))
	  (kill-local-variable 'backup-inhibited)))
    #+end_src

** Backup
   #+begin_src elisp
     ;; Backup of a file the first time it is saved.
     (setq make-backup-files     t

	   ;; Don't clobber symlinks
	   backup-by-copying         t

	   ;; Version numbers for backup files
	   version-control           t

	   ;; Delete excess backup files silently
	   delete-old-versions       t

	   ;; Use system trash can
	   delete-by-moving-to-trash t

	   ;; Oldest versions to keep when a new numbered backup is made
	   kept-old-versions         6

	   ;; Newest versions to keep when a new numbered backup is made
	   kept-new-versions         9

	   ;; Auto-save every buffer that visits a file
	   auto-save-default         t

	   ;; Number of seconds idle time before auto-save
	   auto-save-timeout         20

	   ;; Number of keystrokes between auto-saves
	   auto-save-interval        200

	   ;; Don't create lockfiles
	   create-lockfiles          nil)
   #+end_src

** Frame
*** Hide useless
**** Hide tool bar
     #+begin_src elisp
       (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
     #+end_src

**** Hide menu bar
     Menu bar also can be accessed using F10 key.
     #+begin_src elisp
       (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
     #+end_src

**** Hide scroll bar
     #+begin_src elisp
       (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
     #+end_src

**** Disable cursor blinking
     #+begin_src elisp
       (when (fboundp 'blink-cursor-mode) (blink-cursor-mode -1))
     #+end_src

*** Font
    Set frame font to the [[https://github.com/ryanoasis/nerd-fonts][Hack Nerd one]]
    #+begin_src elisp
      (set-frame-font "Hack Nerd Font 12" nil t)
    #+end_src

*** Ring
    Don't ever ring
    #+begin_src elisp
      (setq ring-bell-function 'ignore)
    #+end_src

** Buffer
*** Auto refresh
    Auto revert mode looks for changes to files, and updates them for you.
    #+begin_src elisp
      (global-auto-revert-mode 1)
      (setq global-auto-revert-non-file-buffers t)
      (setq auto-revert-verbose nil)
    #+end_src
    With these settings, dired buffers are also updated. The last
    setting makes sure that you're not alerted every time this
    happens, which is every time you save something.

*** Fill column
    Display fill column indicator at every my/buffer-width column
    #+begin_src elisp
      (setq-default display-fill-column-indicator-column my/buffer-width)
      (setq-default fill-column my/buffer-width)
      (global-display-fill-column-indicator-mode 1)
    #+end_src

*** Line numbers
    Display line numbers everywhere
    #+begin_src elisp
      (global-display-line-numbers-mode 1)
    #+end_src

*** Scrolling
    Smooth scrolling
    #+begin_src elisp
      (setq scroll-step 0
	    scroll-margin 0
	    scroll-conservatively 10000
	    mouse-wheel-progressive-speed nil
	    mouse-wheel-follow-mouse t
	    scroll-preserve-screen-position t)
    #+end_src

*** Final new line
    Automatically end each file with new line
    #+begin_src elisp
      (setq-default mode-require-final-newline t)
    #+end_src

*** Whitespace cleanup
    Remove useless whitespace before saving a file
    #+begin_src elisp
      (add-hook 'before-save-hook 'whitespace-cleanup)
      (add-hook 'before-save-hook (lambda() (delete-trailing-whitespace)))
    #+end_src

*** Wrapping
    Wrap by words instead of characters
    #+begin_src elisp
      (setq word-wrap t)
    #+end_src

*** Indentation
    Don't indent with tabs
    #+begin_src elisp
      (setq indent-tabs-mode nil)
    #+end_src

    Set tab width to 4
    #+begin_src elisp
      (setq tab-width 4)
    #+end_src

    Erase more spaces at once instead of erasing one space at time
    #+begin_src elisp
      (setq backward-delete-char-untabify-method 'hungry)
    #+end_src

*** Parenthesis
    Highlight any matching parenthesis
    #+begin_src elisp
      (show-paren-mode 1)
    #+end_src

    Close parenthesis automatically
    #+begin_src elisp
      (electric-pair-mode 1)
    #+end_src

*** Auto fill mode
    Enable auto fill minor mode for some major modes
    #+begin_src elisp
      (add-hook 'org-mode-hook 'auto-fill-mode)
      (add-hook 'text-mode-hook 'auto-fill-mode)
      (add-hook 'markdown-mode-hook 'auto-fill-mode)
      (add-hook 'fundamental-mode-hook 'auto-fill-mode)
    #+end_src

** Server
   Start emacs server if not already started
   #+begin_src elisp
     (require 'server)
     (unless (server-running-p)
       (server-start))
   #+end_src

** Minibuffer
*** Yes or No Alias
    Make 'yes or no' messages like 'y or n'
    #+begin_src elisp
      (defalias 'yes-or-no-p 'y-or-n-p)
    #+end_src

** Encoding
   Set default encoding system to utf-8
   #+begin_src elisp
     (set-language-environment   "utf-8")
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-keyboard-coding-system 'utf-8)
     (prefer-coding-system       'utf-8)
   #+end_src
   Set default input method to the russian-computer
   #+begin_src elisp
     (setq default-input-method 'russian-computer)
   #+end_src
   Change X clipboard behavior
   #+begin_src elisp
     (setq x-select-enable-keyboard t)
     (setq x-select-request-type 'UTF8_STRING)
   #+end_src

** Package Management and Advanced Customization
*** use-package
    Install use-package - syntax sugar for better package management
    #+begin_src elisp
      (straight-use-package 'use-package)
    #+end_src

*** Which Key
    which-key is a useful UI panel that appears when you start pressing any key
    binding in Emacs to offer you all possible completions for the prefix. For
    example, if you press C-c (hold control and press the letter c), a panel
    will appear at the bottom of the frame displaying all of the bindings under
    that prefix and which command they run. This is very useful for learning the
    possible key bindings in the mode of your current buffer.
    #+begin_src elisp
      (use-package which-key
	:straight t
	:init (which-key-mode)
	:diminish which-key-mode
	:config
	(setq which-key-idle-delay 1))
    #+end_src

*** General
    #+begin_src elisp
      (use-package general
	:straight t)
    #+end_src

*** Solarized Theme
    #+begin_src elisp
      (use-package solarized-theme
	:if (display-graphic-p)
	:straight t
	:config
	(load-theme 'solarized-dark t))
    #+end_src

*** Keep .emacs.d clean
    #+begin_src elisp
      (use-package no-littering
	:straight t
	:custom
	(auto-save-file-name-transforms
	 `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
	(custom-file (no-littering-expand-etc-file-name "custom.el"))
	:config
	(unless (file-exists-p custom-file)
	  (write-region "" nil custom-file))
	(load custom-file))
    #+end_src

*** IDE features

**** lsp-mode
     #+begin_src elisp
       (use-package lsp-mode
	 :straight t
	 :commands (lsp lsp-deferred)
	 :hook lsp-ui-mode
	 :custom
	 (lsp-rust-analyzer-cargo-watch-command "clippy")
	 (lsp-signature-auto-activate nil)
	 (lsp-keymap-prefix "C-c l")
	 :config
	 (global-eldoc-mode -1)
	 (lsp-enable-which-key-integration t))
     #+end_src

**** lsp-ui
     #+begin_src elisp
       (use-package lsp-ui
	 :disabled
	 :straight t
	 :commands lsp-ui-mode
	 :custom
	 (lsp-ui-doc-enable t))
     #+end_src

**** flycheck
     #+begin_src elisp
       (use-package flycheck
	 :straight t)
     #+end_src

**** yasnippet-snippets
     #+begin_src elisp
       (use-package yasnippet-snippets
	 :straight t)
     #+end_src

**** yasnippet
     #+begin_src elisp
       (use-package yasnippet
	 :after yasnippet-snippets
	 :straight t
	 :hook ((prog-mode . yas/minor-mode)
		(text-mode . yas/minor-mode))
	 :config
	 (yas-reload-all))
     #+end_src

**** company
     #+begin_src elisp
       (use-package company
	 :after (lsp-mode yasnippet)
	 :straight t
	 :hook (lsp-mode . company-mode)
	 :bind (:map company-active-map
		     ("C-n" . next-line)
		     ("C-p" . previous-line)
		     ("M-n" . company-select-next)
		     ("M-p" . company-select-previous)
		     ("M-<" . company-select-first)
		     ("M->" . company-select-last))
	 :custom
	 (company-minimum-prefix-length 1)
	 (company-idle-delay 0.0))
       (use-package company-box
	 :disabled
	 :straight t
	 :hook (company-mode . company-box-mode))
     #+end_src

**** dap-mode
     #+begin_src elisp
       (use-package dap-mode
	 :straight t
	 :custom
	 (lsp-enable-dap-auto-configure nil)
	 (dap-default-terminal-kind "external")
	 (dap-external-terminal '("alacritty" "-t" "{display}" "-e" "sh" "-c" "{command}"))
	 :config
	 (dap-mode 1)
	 (dap-ui-mode 1)
	 (dap-tooltip-mode 0)
	 (tooltip-mode 0)
	 (dap-ui-controls-mode 1))

       ;; Set up Node debugging
       (require 'dap-node)
       (dap-node-setup) ;; Automatically installs Node debug adapter if needed
       (general-define-key
	:keymaps 'lsp-mode-map
	:prefix lsp-keymap-prefix
	"d" '(dap-hydra t :wk "debugger"))
     #+end_src

*** Different programming language support
**** Rust
     #+begin_src elisp
       (use-package rustic
	 :straight t)
     #+end_src

**** Python
     #+begin_src elisp
       (use-package python-mode
	 :straight t
	 :hook (python-mode . lsp-deferred)
	 :custom
	 (dap-python-executable "python")
	 (dap-python-debugger 'debugpy)
	 :config
	 (require 'dap-python)
	 (dap-register-debug-template
	  "Python :: Debug"
	  (list :type "python"
		:console "externalTerminal"
		:args ""
		:cwd nil
		:program nil
		:request "launch"
		:name "Python :: Debug")))
       (use-package pyvenv
	 :straight t
	 :config
	 (pyvenv-mode 1))
     #+end_src

**** C/Cmake
     #+begin_src elisp
       (use-package cmake-mode
	 :straight t)
     #+end_src

*** Highlight Indent Guides
    #+begin_src elisp
      (use-package highlight-indent-guides
	:straight t
	:custom (highlight-indent-guides-method 'character)
	:hook ((prog-mode . highlight-indent-guides-mode)
	       (org-mode  . highlight-indent-guides-mode)))
    #+end_src

*** Better mode line
    #+begin_src elisp
      (use-package telephone-line
	:straight t
	:config
	(telephone-line-mode 1))
    #+end_src

*** Better project management
    #+begin_src elisp
      (use-package projectile
	:demand t
	:straight t
	:bind-keymap ("C-c p" . projectile-command-map)
	:config
	(projectile-mode 1))
    #+end_src

*** Magit
    #+begin_src elisp
      (use-package magit
	:demand t
	:straight t)
    #+end_src

*** Helm
**** helm
     #+begin_src elisp
       (use-package helm
	 :demand t
	 :straight t
	 :custom (helm-M-x-fuzzy-match t)
	 :bind ("M-x"     . helm-M-x)
	 ("C-x r b" . helm-filtered-bookmarks)
	 ("C-x C-f" . helm-find-files)
	 :config
	 (helm-mode 1))
     #+end_src

**** helm-ag
     #+begin_src elisp
       (use-package helm-ag
	 :after helm
	 :straight t)
     #+end_src

**** helm-projectile
     #+begin_src elisp
       (use-package helm-projectile
	 :after (helm projectile)
	 :straight t
	 :config
	 (helm-projectile-on))
     #+end_src

*** Dired
**** dired-subtree
     #+begin_src elisp
       (use-package dired-subtree
	 :straight t)
     #+end_src

**** dired-filter
     #+begin_src elisp
       (use-package dired-filter
	 :straight t)
     #+end_src

**** dired-open
     #+begin_src elisp
       (use-package dired-open
	 :straight t)
     #+end_src

*** Org
**** Org Mode
     [[https://orgmode.org/worg/org-configs/org-customization-guide.html][Very helpful guide about org mode customization for begginers]]
     #+begin_src elisp
       (use-package org
	 :straight t
	 :after no-littering
	 :bind (("C-c l" . org-store-link)
		("C-c a" . org-agenda)
		("C-c c" . org-capture)
		:map org-mode-map
		("C-M-i" . completion-at-point))
	 :custom
	 (org-directory "~/Org")
	 (org-hide-leading-stars t)
	 (org-adapt-indentation t)
	 (org-element-use-cache nil)
	 (org-enforce-todo-dependencies t)
	 (org-enforce-todo-checkbox-dependencies t)
	 (org-startup-with-inline-images t)
	 (org-image-actual-width nil)
	 (org-hierarchical-todo-statistics nil)
	 (org-checkbox-hierarchical-statistics nil)
	 (org-latex-create-formula-image-program 'imagemagick)
	 (org-preview-latex-image-directory
	  (expand-file-name "ltximg/" no-littering-var-directory))
	 (org-latex-packages-alist
	  '(("" "amsmath" t nil)
	    ("" "amsthm" t nil)
	    ("" "amssymb" t nil)
	    ("" "mathtext" t nil)
	    ("AUTO" "inputenc" t
	     ("pdflatex"))
	    ("T1,T2A" "fontenc" t
	     ("pdflatex"))
	    ("english,russian" "babel" t nil)
	    ("" "tikz" t nil)
	    ("" "pgfplots" t nil)))
	 (org-format-latex-options
	  (plist-put org-format-latex-options :scale 1.5))
	 :config
	 (eval-after-load "preview"
	   '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t)))
     #+end_src

**** Org Fragtog
     Automatically toggle Org mode LaTeX fragment previews as the cursor enters
     and exits them
     #+begin_src elisp
       (use-package org-fragtog
	 :after org
	 :straight t
	 :hook ((org-mode . org-fragtog-mode)
		(org-mode . (lambda () (org-latex-preview '(16))))))
     #+end_src

**** Org Roam
     #+begin_src elisp
       (use-package org-roam
	 :straight t
	 :after org
	 :bind (("C-c n l" . org-roam-buffer-toggle)
		("C-c n f" . org-roam-node-find)
		("C-c n i" . org-roam-node-insert)
		("C-c n c" . org-roam-capture)
		("C-c n j" . org-roam-dailies-capture-today))
	 :init
	 (setq org-roam-completion-everywhere t)
	 (setq org-roam-directory (file-truename "~/Braindump/Notes"))
	 (setq org-roam-capture-templates
	       '(("d" "default" plain "* Метаданные\n** Источники\n   - %?\n** Ссылки\n   - \n* Данные\n"
		  :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
				     "#+title: ${title}\n")
		  :unnarrowed t)))
	 (setq org-roam-v2-ack t)
	 :config
	 (org-roam-db-autosync-mode))
       (use-package org-roam-ui
	 :straight
	 (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
	 :after org-roam
	 :bind ("C-c n g" . org-roam-ui-mode)
	 :config
	 (setq org-roam-ui-sync-theme t
	       org-roam-ui-follow t
	       org-roam-ui-update-on-save t
	       org-roam-ui-open-on-start t))
     #+end_src

** Restore gc-cons-threshold
   #+begin_src elisp
     (setq gc-cons-threshold gc-cons-threshold-default)
     (makunbound 'gc-cons-threshold-default)
   #+end_src
